<job id="SaveWinPETpmOwnerAuth">
    <script language="VBScript">
        
' // ***************************************************************************
' // 
' // Copyright (c) Microsoft Corporation.  All rights reserved.
' // 
' // Microsoft BitLocker Administration and Monitoring
' //
' // File:      SaveWinPETpmOwnerAuth.wsf
' // 
' // Purpose:   Save the TPM owner-auth stored in Win PE registry to the machine
' //            registry hive file of the default OS.
' // 
' //
' // Prerequisites:
' //            WinPE 4.0 and higher
' //
' // Usage:     cscript SaveWinPETpmOwnerAuth.wsf
' //              
' //            - Failure in saving WinPE TPM owner-auth will be ignored and not
' //              reported to upper level, i.e. the script always exits with 0.
' //
' //            cscript SaveWinPETpmOwnerAuth.wsf 0
' //            cscript SaveWinPETpmOwnerAuth.wsf False
' //
' //            - Failure in saving WinPE TPM owner-auth will be reported to
' //              upper level, i.e. the script exits with a non-zero error code
' //              on failure.
' //
' // Logs:
' //            Logs are written in SaveWinPETpmOwnerAuth.log, which can be
' //            found at two locations:
' //            - WinPE: %TEMP%
' //            - Default OS: <OS volume>\Windows\temp if the default OS is
' //              detected by the script.
' //            
' //            Note: If the log file cannot be created, then the log messages
' //            will be written to stdout or stderr.
' // 
' // ***************************************************************************


Option Explicit

'// Constants.
Public Const SUCCESS = 0
Public Const INSECURE_OWNER_AUTH = "SieFVUzUzPslub85cadGVioFYHU="
Public Const BCD_BOOTMGR_ID = "{9dea862c-5cdd-4e70-acc1-f32b344d4795}"
Public Const BCD_DEFAULT_BOOTLOADER_ID_TYPE = &h23000003
Public Const BCD_OS_DEVICE_TYPE = &h21000001
Public Const SPECIAL_FOLDER_TEMP = 2
Public Const LOG_FILE_NAME = "SaveWinPETpmOwnerAuth.log"

'// Variables.
Dim iRet                    '// return value
Dim bIgnoreFailure          '// flag indicating if failure will be reported to upper level
Dim oTpm                    '// TPM WMI object
Dim bTpmOwned               '// flag indicating if TPM is owned
Dim sWinPETpmOwnerAuth      '// TPM owner-auth stored in WinPE registry
Dim sDefaultOSDevicePath    '// default OS device path
Dim sLogFilePath            '// log file path
Dim oLogFile                '// log file object
Dim bLogFileReady           '// flag indicating if the log file is ready for writting

'// Prepare the log file.
iRet = PrepareLogFile()
If (iRet <> SUCCESS) Then
    Wscript.StdErr.WriteLine("Failed to prepare the log file. The script will continue running, but no log file will be available." & " Error: " & iRet)
End If

'// Parse command line arguments.
'// 1. bIgnoreFailure - Boolean, Optional, default=True
bIgnoreFailure = True '// defaults to ignore failure
If (Wscript.Arguments.Count() > 0) Then
    bIgnoreFailure = Wscript.Arguments(0)
End If

If (bIgnoreFailure) Then
    LogMessage("Failure in saving WinPE TPM owner-auth will be ignored.")
Else
    LogMessage("Failure in saving WinPE TPM owner-auth will not be ignored.")
End If

'// Find the default OS device path.
iRet = GetDefaultOSDevicePath()
If (iRet <> SUCCESS) Then
    LogMessage("Failed to get the default OS device path." & " Error: " & iRet)
    ExitScript(iRet)
Else
    LogMessage("Default OS device path: " & sDefaultOSDevicePath)
End If

'// Get TPM WMI instance.
iRet = GetTpmInstance()
If (iRet <> SUCCESS) Then
    LogMessage("Failed to get TPM WMI instance." & " Error: " & iRet)
    ExitScript(iRet)
Else
    LogMessage("Succeeded in getting TPM WMI instance.")
End If

'// Check if TPM is owned.
'// Try save WinPE TPM owner-auth only if the TPM is owned.
iRet = oTpm.IsOwned(bTpmOwned)
If (iRet <> SUCCESS) Then
    LogMessage("Failed to check if TPM is owned." & " Error: " & iRet)
    ExitScript(iRet)
ElseIf (bTpmOwned) Then
    LogMessage("TPM is owned, try save WinPE TPM owner-auth to the registry of the default OS.")
Else
    LogMessage("TPM is not owned - There is no owner-auth to save. The script will exit.")
    ExitScript(0)
End If

'// Get WinPE TPM owner-auth.
iRet = oTpm.GetOwnerAuth(sWinPETpmOwnerAuth)
If (iRet <> SUCCESS) Then
    LogMessage("Failed to get WinPE TPM owner-auth." & " Error: " & iRet)
    ExitScript(iRet)
Else
    LogMessage("Succeeded in getting WinPE TPM owner-auth.")
End If

'// If WinPE TPM owner-auth is the insecure one, generate a new one.
If (sWinPETpmOwnerAuth = INSECURE_OWNER_AUTH) Then
    LogMessage("The current WinPE TPM owner-auth is not secure. A new one will be generated.")
    iRet = oTpm.ChangeOwnerAuth("", "")
    If (iRet <> SUCCESS) Then
        LogMessage("Failed to generate a new WinPE TPM owner-auth." & iRet)
        ExitScript(iRet)
    Else 
        '// Get the newly generated WinPE TPM owner-auth.
        iRet = oTpm.GetOwnerAuth(sWinPETpmOwnerAuth)
        If (iRet <> SUCCESS) Then
            LogMessage("Failed to get the newly generated WinPE TPM owner-auth." & " Error: " & iRet)
            ExitScript(iRet)
        Else
            LogMessage("Succeeded in getting the newly generated WinPE TPM owner-auth.")
        End If
    End If
Else
    LogMessage("Succeeded in validating WinPE TPM owner-auth.")
End If

'// Save TPM owner-auth to the system registry hive file on the default OS device.
iRet = SaveOwnerAuthToRegistry(sWinPETpmOwnerAuth, sDefaultOSDevicePath)
if (iRet <> SUCCESS) Then
    LogMessage("Failed to save WinPE TPM owner-auth to the system registry hive of the default OS." & " Error: " & iRet)
    ExitScript(iRet)
Else
    LogMessage("Succeeded in saving WinPE TPM owner-auth to the system registry hive of the default OS.")
End If

ExitScript(0)


'// Helper function to get the error.
Function GetError()
    GetError = "Error: " & Err.number & " " & Err.Description
End Function

'// Helper function to prepare the log file.
Function PrepareLogFile()
    Dim oFileSystem

    On Error Resume Next

    PrepareLogFile = SUCCESS
    bLogFileReady = False

    '// Get the file system object.
    Set oFileSystem = CreateObject("Scripting.FileSystemObject")
    If Err Then 
        Wscript.StdErr.WriteLine("Failed to get the file system object. " & GetError)
        PrepareLogFile = Err.number
        Err.Clear '// not a critical error for the script
        Exit Function
    End If

    '// Get the absolute path to the log file.
    sLogFilePath = oFileSystem.GetSpecialFolder(SPECIAL_FOLDER_TEMP) & "\" & LOG_FILE_NAME
    If Err Then 
        Wscript.StdErr.WriteLine("Failed to get the log file path (%TEMP%\<log_file_name>). " & GetError)
        PrepareLogFile = Err.number
        Err.Clear '// not a critical error for the script
        Exit Function
    End If

    '// Open the log file for writing.
    Set oLogFile = oFileSystem.OpenTextFile(sLogFilePath, 2, True)
    If Err Then 
        Wscript.StdErr.WriteLine("Failed to open the log file for writing. File: " & sLogFilePath & " " & GetError)
        PrepareLogFile = Err.number
        Err.Clear '// not a critical error for the script
        Exit Function
    End If

    bLogFileReady = True
End Function

'// Helper function to log a message.
Function LogMessage(sMessage)
    If (bLogFileReady) Then
        oLogFile.WriteLine(sMessage)
    Else
        Wscript.StdOut.WriteLine(sMessage)
    End If 
End Function

'// Helper function to copy the log file to the TEMP folder of the default OS.
'// The log file is not available for writing at this time, thus all errors will be written to stderr.
Function CopyLogFileToDefaultOS()
    Dim oFileSystem, sOSLogFilePath, oOSLogFile

    On Error Resume Next

    CopyLogFileToDefaultOS = SUCCESS

    If (Not IsEmpty(sDefaultOSDevicePath)) Then
        '// Get the file system object.
        Set oFileSystem = CreateObject("Scripting.FileSystemObject")
        If Err Then
            Wscript.StdErr.WriteLine("Failed to get the file system object. " & GetError)
            CopyLogFileToDefaultOS = Err.number
            Err.Clear '// not a critical error for the script
            Exit Function
        End If

        '// Open the log file for reading.
        Set oLogFile = oFileSystem.OpenTextFile(sLogFilePath, 1)
        If Err Then
            Wscript.StdErr.WriteLine("Failed to open the log file on WinPE for reading. File: " & sLogFilePath & " " & GetError)
            CopyLogFileToDefaultOS = Err.number
            Err.Clear '// not a critical error for the script
            Exit Function
        End If

        '// Open the log file on default OS for writing.
        sOSLogFilePath = "\\?\GLOBALROOT" & sDefaultOSDevicePath & "\windows\temp\" & LOG_FILE_NAME
        Set oOSLogFile = oFileSystem.OpenTextFile(sOSLogFilePath, 2, True)
        If Err Then
            Wscript.StdErr.WriteLine("Failed to open the log file on default OS for writting. File: " & sOSLogFilePath & " " & GetError)
            CopyLogFileToDefaultOS = Err.number
            Err.Clear '// not a critical error for the script
            Exit Function
        End If
            
        oOSLogFile.Write oLogFile.ReadAll
        If Err Then
            Wscript.StdErr.WriteLine("Failed to write the content of the log file on WinPE to default OS. " & GetError)
            CopyLogFileToDefaultOS = Err.number
            Err.Clear '// not a critical error for the script
            Exit Function
        End If
            
        oLogFile.Close
        oOSLogFile.Close
    End If
End Function

'// Helper function to exit the script.
'// The script will exit with 0 or the given error code depending on flag bIgnoreFailure.
Function ExitScript(iRet)
    Dim iMyRet

    On Error Resume Next

    '// Clean up.
    If (bLogFileReady) Then
        oLogFile.Close
        bLogFileReady = False

        '// Copy the log file to default OS. Failure in copying is not considered critical.
        iMyRet = CopyLogFileToDefaultOS()
        If (iMyRet <> SUCCESS) Then
            Wscript.StdErr.WriteLine("Failed to copy the log file from WinPE to default OS." & " Error: " & iMyRet) 
        End If
    End If

    If (bIgnoreFailure) Then
        Wscript.Quit(SUCCESS)
    Else
        Wscript.Quit(iRet)
    End If
End Function

'// Helper function to get the TPM WMI instance.
'// On success, the TPM WMI instance will be stored in variable oTpm.
Function GetTpmInstance()
    Dim sConnection, oTpmWmi, iTpmWmi

    On Error Resume Next

    GetTpmInstance = SUCCESS

    '// Connect to TPM WMI provider.
    sConnection = "winmgmts:{impersonationLevel=impersonate,authenticationLevel=pktPrivacy}!root\cimv2\Security\MicrosoftTpm"
    Set oTpmWmi = GetObject(sConnection)
    If Err Then 
        LogMessage("Failed to connect to TPM WMI provider. " & GetError)
        GetTpmInstance = Err.number
        Exit Function
    End If
        
    '// There should either be 0 or 1 instance of the TPM provider class.
    Set iTpmWmi = oTpmWmi.InstancesOf("Win32_Tpm")
    If iTpmWmi.Count = 0 Then
        LogMessage("Failed to find a TPM WMI instance in the provider class.")
        GetTpmInstance = Err.number
        Exit Function
    End If

    '// Get an instance of the TPM provider class.
    Set oTpm = oTpmWmi.Get("Win32_Tpm=@")
    If Err Then 
        LogMessage("Failed to get the TPM WMI instance. " & GetError)
        GetTpmInstance = Err.number
        Exit Function
    End If
End Function

'// Helper function to get the default OS device path.
'// On success, the default OS device path will be stored in variable sDefaultOSDevicePath.
Function GetDefaultOSDevicePath()
    Dim oBcdStoreClass, oStore, oBootMgr, oDefaultBootLoaderID, oBootLoader, oOSDevice

    On Error Resume Next

    GetDefaultOSDevicePath = SUCCESS

    '// Connect to the BCD store WMI provider.
    Set oBcdStoreClass = GetObject("winmgmts:{(Backup,Restore)}\\.\root\wmi:BcdStore")
    If Err Then 
        LogMessage("Failed to connect to the BCD store WMI provider. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    '// Open the system BCD store.
    oBcdStoreClass.OpenStore "", oStore
    If Err Then 
        LogMessage("Failed to open the system BCD store. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    '// Open the boot manager BCD object.
    oStore.OpenObject BCD_BOOTMGR_ID, oBootMgr
    If Err Then 
        LogMessage("Failed to open the boot manager BCD object. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    '// Get the default boot loader ID BCD element from the boot manager BCD object.
    oBootMgr.GetElement BCD_DEFAULT_BOOTLOADER_ID_TYPE, oDefaultBootLoaderID
    If Err Then 
        LogMessage("Failed to get the default boot loader ID BCD element from the boot manager BCD object. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    '// Open the default boot loader BCD object.
    oStore.OpenObject oDefaultBootLoaderID.Id, oBootLoader
    If Err Then 
        LogMessage("Failed to open the default boot loader BCD object. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    '// Get the OS device BCD element from the default boot loader BCD object.
    oBootLoader.GetElement BCD_OS_DEVICE_TYPE, oOSDevice
    If Err Then 
        LogMessage("Failed to get the OS device BCD element from the default boot loader BCD object. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    sDefaultOSDevicePath = oOSDevice.Device.Path
End Function

'// Helper function to save a given TPM owner-auth to the system registry hive of a given device.
Function SaveOwnerAuthToRegistry(sOwnerAuth, sDevicePath)
    Dim oShell, iErr, sSystemHivePath

    On Error Resume Next

    SaveOwnerAuthToRegistry = SUCCESS

    Set oShell = CreateObject("Wscript.Shell")
    If Err Then 
        LogMessage("Failed to create Shell object. " & GetError)
        SaveOwnerAuthToRegistry = Err.number
        Exit Function
    End If

    '// Load the system hive of the default OS.
    sSystemHivePath = "\\?\GLOBALROOT" & sDefaultOSDevicePath & "\windows\system32\config\SYSTEM"
    iErr = oShell.Run("reg load HKLM\mbam " & sSystemHivePath, 0, True)
    If (iErr <> SUCCESS) Then
        LogMessage("Failed to load registry hive: " & sSystemHivePath & " Error: " & iErr)
        SaveOwnerAuthToRegistry = iErr
        Exit Function
    End If

    '// Write TPM owner-auth to the proper location in the hive.
    iErr = oShell.Run("reg add HKLM\mbam\ControlSet001\Services\TPM\WMI\Admin /f /v OwnerAuthFull /t REG_SZ /d " & sOwnerAuth, 0, True)
    If (iErr <> SUCCESS) Then
        LogMessage("Failed to save the TPM owner-auth to registry hive: " & sSystemHivePath & " Error: " & iErr)
        SaveOwnerAuthToRegistry = iErr
    End If

    '// Unload the system hive of the default OS.
    iErr = oShell.Run("reg unload HKLM\mbam", 0, True)
    If (iErr <> SUCCESS) Then
        LogMessage("Failed to unload registry hive: " & sSystemHivePath & " Error: " & iErr)
    End If
End Function

    </script>

<signature>
** SIG ** MIIdngYJKoZIhvcNAQcCoIIdjzCCHYsCAQExCzAJBgUr
** SIG ** DgMCGgUAMGcGCisGAQQBgjcCAQSgWTBXMDIGCisGAQQB
** SIG ** gjcCAR4wJAIBAQQQcAVhGs441BGiowAQS9NQkAIBAAIB
** SIG ** AAIBAAIBAAIBADAhMAkGBSsOAwIaBQAEFKGGk0SWMSyh
** SIG ** gW7b8jfu80Iw/hswoIIYZDCCBMMwggOroAMCAQICEzMA
** SIG ** AADGeIA2AXUaaXIAAAAAAMYwDQYJKoZIhvcNAQEFBQAw
** SIG ** dzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
** SIG ** b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
** SIG ** Y3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWlj
** SIG ** cm9zb2Z0IFRpbWUtU3RhbXAgUENBMB4XDTE2MDkwNzE3
** SIG ** NTg1M1oXDTE4MDkwNzE3NTg1M1owgbMxCzAJBgNVBAYT
** SIG ** AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
** SIG ** EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
** SIG ** cG9yYXRpb24xDTALBgNVBAsTBE1PUFIxJzAlBgNVBAsT
** SIG ** Hm5DaXBoZXIgRFNFIEVTTjpGNTI4LTM3NzctOEE3NjEl
** SIG ** MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
** SIG ** dmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
** SIG ** ggEBAK0LIxuoyogoFDbjw2hdBoQodUGHEqicqTQCYKGt
** SIG ** RrYKDayl0w1GReivnhzzc17/b/y2mC2V9hsjiPZRs+eb
** SIG ** V1b9TcuiNbnlYctnFAIXRPiJFUegLQqPAK/Lh8BKZMk4
** SIG ** vuGMK+rDhjO2K8AasPknmgYwcDjfvBPEgM9KYJhx4+HD
** SIG ** b7eQOkfiEAurcohcfiRDDtaqpyE0iNqsd5Dl4Q98kxeG
** SIG ** I40Z08dxxqX2sFAsn1rMWrABx5SCxAH7FQJl7G6+FwAt
** SIG ** hwWRil6NN4wJn75m4G5t1eCgStvelJ56fdkWZsABKi9P
** SIG ** J/pa5fjxHesOBPZrRR4UfcBkltvQuf9Gzmq/cx8CAwEA
** SIG ** AaOCAQkwggEFMB0GA1UdDgQWBBTUv/YysIgxD+YZlPE+
** SIG ** vzH6WwIPCTAfBgNVHSMEGDAWgBQjNPjZUkZwCu1A+3b7
** SIG ** syuwwzWzDzBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
** SIG ** Y3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0
** SIG ** cy9NaWNyb3NvZnRUaW1lU3RhbXBQQ0EuY3JsMFgGCCsG
** SIG ** AQUFBwEBBEwwSjBIBggrBgEFBQcwAoY8aHR0cDovL3d3
** SIG ** dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3Nv
** SIG ** ZnRUaW1lU3RhbXBQQ0EuY3J0MBMGA1UdJQQMMAoGCCsG
** SIG ** AQUFBwMIMA0GCSqGSIb3DQEBBQUAA4IBAQCYWwDc76NI
** SIG ** i+RQOWeUJMBvj75A3zmmLE2JLKhZPjIKasz8XBcEmDBP
** SIG ** 0v8MooXeJcIEOgj3TuQBs95uQ2VO4D0uRXApddJPaU8W
** SIG ** eLPOez7vGaxNsa51MlIkBZeQ2Eja6ET7kGEWWV7NsStV
** SIG ** lZ9SXMHAMCcH7tZMJ3mzw/dKNQ0ZTaMxxdzTGiKNJwk0
** SIG ** QDfOnkgcinWKQ53YKVS0qDdsFJ7IeGy3GaqHeKM3ZL4B
** SIG ** kuzdQH9fERBUlAVa2n+zKEsSnjSCiy8oYDcQ8Wca1IJz
** SIG ** 298y+98zo+NANSG8N1syaG/L2CvoAWFjkZeI5urwsAKv
** SIG ** +fdc/N+BwzR+tFHdGx/sUuz6MIIGBzCCA++gAwIBAgIK
** SIG ** YRZoNAAAAAAAHDANBgkqhkiG9w0BAQUFADBfMRMwEQYK
** SIG ** CZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJ
** SIG ** bWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9v
** SIG ** dCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcwNDAz
** SIG ** MTI1MzA5WhcNMjEwNDAzMTMwMzA5WjB3MQswCQYDVQQG
** SIG ** EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
** SIG ** BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
** SIG ** cnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGlt
** SIG ** ZS1TdGFtcCBQQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IB
** SIG ** DwAwggEKAoIBAQCfoWyx39tIkip8ay4Z4b3i48WZUSNQ
** SIG ** rc7dGE4kD+7Rp9FMrXQwIBHrB9VUlRVJlBtCkq6YXDAm
** SIG ** 2gBr6Hu97IkHD/cOBJjwicwfyzMkh53y9GccLPx754gd
** SIG ** 6udOo6HBI1PKjfpFzwnQXq/QsEIEovmmbJNn1yjcRlOw
** SIG ** htDlKEYuJ6yGT1VSDOQDLPtqkJAwbofzWTCd+n7Wl7Po
** SIG ** IZd++NIT8wi3U21StEWQn0gASkdmEScpZqiX5NMGgUqi
** SIG ** +YSnEUcUCYKfhO1VeP4Bmh1QCIUAEDBG7bfeI0a7xC1U
** SIG ** n68eeEExd8yb3zuDk6FhArUdDbH895uyAc4iS1T/+QXD
** SIG ** wiALAgMBAAGjggGrMIIBpzAPBgNVHRMBAf8EBTADAQH/
** SIG ** MB0GA1UdDgQWBBQjNPjZUkZwCu1A+3b7syuwwzWzDzAL
** SIG ** BgNVHQ8EBAMCAYYwEAYJKwYBBAGCNxUBBAMCAQAwgZgG
** SIG ** A1UdIwSBkDCBjYAUDqyCYEBWJ5flJRP8KuEKU5VZ5KSh
** SIG ** Y6RhMF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJ
** SIG ** kiaJk/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1p
** SIG ** Y3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0
** SIG ** eYIQea0WoUqgpa1Mc1j0BxMuZTBQBgNVHR8ESTBHMEWg
** SIG ** Q6BBhj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtp
** SIG ** L2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5j
** SIG ** cmwwVAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjho
** SIG ** dHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRz
** SIG ** L01pY3Jvc29mdFJvb3RDZXJ0LmNydDATBgNVHSUEDDAK
** SIG ** BggrBgEFBQcDCDANBgkqhkiG9w0BAQUFAAOCAgEAEJeK
** SIG ** w1wDRDbd6bStd9vOeVFNAbEudHFbbQwTq86+e4+4LtQS
** SIG ** ooxtYrhXAstOIBNQmd16QOJXu69YmhzhHQGGrLt48ovQ
** SIG ** 7DsB7uK+jwoFyI1I4vBTFd1Pq5Lk541q1YDB5pTyBi+F
** SIG ** A+mRKiQicPv2/OR4mS4N9wficLwYTp2OawpylbihOZxn
** SIG ** LcVRDupiXD8WmIsgP+IHGjL5zDFKdjE9K3ILyOpwPf+F
** SIG ** ChPfwgphjvDXuBfrTot/xTUrXqO/67x9C0J71FNyIe4w
** SIG ** yrt4ZVxbARcKFA7S2hSY9Ty5ZlizLS/n+YWGzFFW6J1w
** SIG ** lGysOUzU9nm/qhh6YinvopspNAZ3GmLJPR5tH4LwC8cs
** SIG ** u89Ds+X57H2146SodDW4TsVxIxImdgs8UoxxWkZDFLyz
** SIG ** s7BNZ8ifQv+AeSGAnhUwZuhCEl4ayJ4iIdBD6Svpu/RI
** SIG ** zCzU2DKATCYqSCRfWupW76bemZ3KOm+9gSd0BhHudiG/
** SIG ** m4LBJ1S2sWo9iaF2YbRuoROmv6pH8BJv/YoybLL+31HI
** SIG ** jCPJZr2dHYcSZAI9La9Zj7jkIeW1sMpjtHhUBdRBLlCs
** SIG ** lLCleKuzoJZ1GtmShxN1Ii8yqAhuoFuMJb+g74TKIdbr
** SIG ** Hk/Jmu5J4PcBZW+JC33Iacjmbuqnl84xKf8OxVtc2E0b
** SIG ** odj6L54/LlUWa8kTo/0wggYQMIID+KADAgECAhMzAAAA
** SIG ** ZEeElIbbQRk4AAAAAABkMA0GCSqGSIb3DQEBCwUAMH4x
** SIG ** CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
** SIG ** MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
** SIG ** b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jv
** SIG ** c29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTEwHhcNMTUx
** SIG ** MDI4MjAzMTQ2WhcNMTcwMTI4MjAzMTQ2WjCBgzELMAkG
** SIG ** A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
** SIG ** BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
** SIG ** dCBDb3Jwb3JhdGlvbjENMAsGA1UECxMETU9QUjEeMBwG
** SIG ** A1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjAN
** SIG ** BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAky7a2OY+
** SIG ** mNkbD2RfTahYTRQ793qE/DwRMTrvicJKLUGlSF3dEp7v
** SIG ** q2YoNNV9KlV7TE2K8sDxstNSFYu2swi4i1AL3X/7agmg
** SIG ** 3GcExPHfvHUYIEC+eCyZVt3u9S7dPkL5Wh8wrgEUirCC
** SIG ** tVGg4m1l/vcYCo0wbU06p8XzNi3uXyygkgCxHEziy/f/
** SIG ** JCV/14/A3ZduzrIXtsccRKckyn6B5uYxuRbZXT7RaO6+
** SIG ** zUjQhiyu3A4hwcCKw+4bk1kT9sY7gHIYiFP7q78wPqB3
** SIG ** vVKIv3rY6LCTraEbjNR+phBQEL7hyBxk+ocu+8RHZhbA
** SIG ** hHs2r1+6hURsAg8t4LAOG6I+JQIDAQABo4IBfzCCAXsw
** SIG ** HwYDVR0lBBgwFgYIKwYBBQUHAwMGCisGAQQBgjdMCAEw
** SIG ** HQYDVR0OBBYEFFhWcQTwvbsz9YNozOeARvdXr9IiMFEG
** SIG ** A1UdEQRKMEikRjBEMQ0wCwYDVQQLEwRNT1BSMTMwMQYD
** SIG ** VQQFEyozMTY0Mis0OWU4YzNmMy0yMzU5LTQ3ZjYtYTNi
** SIG ** ZS02YzhjNDc1MWM0YjYwHwYDVR0jBBgwFoAUSG5k5VAF
** SIG ** 04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZD
** SIG ** aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9j
** SIG ** cmwvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNy
** SIG ** bDBhBggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0
** SIG ** dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2Vy
** SIG ** dHMvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNy
** SIG ** dDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4IC
** SIG ** AQCI4gxkQx3dXK6MO4UktZ1A1r1mrFtXNdn06DrARZkQ
** SIG ** Tdu0kOTLdlGBCfCzk0309RLkvUgnFKpvLddrg9TGp3n8
** SIG ** 0yUbRsp2AogyrlBU+gP5ggHFi7NjGEpj5bH+FDsMw9Py
** SIG ** gLg8JelgsvBVudw1SgUt625nY7w1vrwk+cDd58TvAyJQ
** SIG ** FAW1zJ+0ySgB9lu2vwg0NKetOyL7dxe3KoRLaztUcqXo
** SIG ** YW5CkI+Mv3m8HOeqlhyfFTYxPB5YXyQJPKQJYh8zC9b9
** SIG ** 0JXLT7raM7mQ94ygDuFmlaiZ+QSUR3XVupdEngrmZgUB
** SIG ** 5jX13M+Pl2Vv7PPFU3xlo3Uhj1wtupNC81epoxGhJ0tR
** SIG ** uLdEajD/dCZ0xIniesRXCKSC4HCL3BMnSwVXtIoj/QFy
** SIG ** mFYwD5+sAZuvRSgkKyD1rDA7MPcEI2i/Bh5OMAo9App4
** SIG ** sR0Gp049oSkXNhvRi/au7QG6NJBTSBbNBGJG8Qp+5QTh
** SIG ** KoQUk8mj0ugr4yWRsA9JTbmqVw7u9suB5OKYBMUN4hL/
** SIG ** yI+aFVsE/KJInvnxSzXJ1YHka45ADYMKAMl+fLdIqm3n
** SIG ** x6rIN0RkoDAbvTAAXGehUCsIod049A1T3IJyUJXt3OsT
** SIG ** d3WabhIBXICYfxMg10naaWcyUePgW3+VwP0XLKu4O1+8
** SIG ** ZeGyaDSi33GnzmmyYacX3BTqMDCCB3owggVioAMCAQIC
** SIG ** CmEOkNIAAAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJ
** SIG ** BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
** SIG ** DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
** SIG ** ZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29m
** SIG ** dCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDEx
** SIG ** MB4XDTExMDcwODIwNTkwOVoXDTI2MDcwODIxMDkwOVow
** SIG ** fjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
** SIG ** b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
** SIG ** Y3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWlj
** SIG ** cm9zb2Z0IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIw
** SIG ** DQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKvw+nIQ
** SIG ** HC6t2G6qghBNNLrytlghn0IbKmvpWlCquAY4GgRJun/D
** SIG ** DB7dN2vGEtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRs
** SIG ** r55JnOloXtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ2
** SIG ** 6DJSJhIv56sIUM+zRLdd2MQuA3WraPPLbfM6XKEW9Ea6
** SIG ** 4DhkrG5kNXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3
** SIG ** vpQ97/vjK1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuG
** SIG ** G9k+sYxd6IlPhBryoS9Z5JA7La4zWMW3Pv4y07MDPbGy
** SIG ** r5I4ftKdgCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOG
** SIG ** jfdf8NBSv4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKu
** SIG ** HCOnqWbsYR9q4ShJnV+I4iVd0yFLPlLEtVc/JAPw0Xpb
** SIG ** L9Uj43BdD1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5oQ/p
** SIG ** I0m8GLhEfEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkw
** SIG ** p6uO3+xbn6/83bBm4sGXgXvt1u1L50kppxMopqd9Z4Dm
** SIG ** imJ4X7IvhNdXnFy/dygo8e1twyiPLI9AN0/B4YVEicQJ
** SIG ** TMXUpUMvdJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSW
** SIG ** sLxGoGyY0uDWiIwLAgMBAAGjggHtMIIB6TAQBgkrBgEE
** SIG ** AYI3FQEEAwIBADAdBgNVHQ4EFgQUSG5k5VAF04KqFzc3
** SIG ** IrVtqMp1ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBD
** SIG ** AEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8w
** SIG ** HwYDVR0jBBgwFoAUci06AjGQQ7kUBU7h6qfHMdEjiTQw
** SIG ** WgYDVR0fBFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNy
** SIG ** b3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9v
** SIG ** Q2VyQXV0MjAxMV8yMDExXzAzXzIyLmNybDBeBggrBgEF
** SIG ** BQcBAQRSMFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cu
** SIG ** bWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2Vy
** SIG ** QXV0MjAxMV8yMDExXzAzXzIyLmNydDCBnwYDVR0gBIGX
** SIG ** MIGUMIGRBgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUHAgEW
** SIG ** M2h0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMv
** SIG ** ZG9jcy9wcmltYXJ5Y3BzLmh0bTBABggrBgEFBQcCAjA0
** SIG ** HjIgHQBMAGUAZwBhAGwAXwBwAG8AbABpAGMAeQBfAHMA
** SIG ** dABhAHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsF
** SIG ** AAOCAgEAZ/KGpZjgVHkaLtPYdGcimwuWEeFjkplCln3S
** SIG ** eQyQwWVfLiw++MNy0W2D/r4/6ArKO79HqaPzadtjvyI1
** SIG ** pZddZYSQfYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4p
** SIG ** m+Y9G6XUtR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJG
** SIG ** KsKKELukqQUMm+1o+mgulaAqPyprWEljHwlpblqYluSD
** SIG ** 9MCP80Yr3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L
** SIG ** 8giJ1h/DMhji8MUtzluetEk5CsYKwsatruWy2dsViFFF
** SIG ** WDgycScaf7H0J/jeLDogaZiyWYlobm+nt3TDQAUGpgEq
** SIG ** KD6CPxNNZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobD
** SIG ** HWM2l4bf2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbR
** SIG ** BrF1HxS+YWG18NzGGwS+30HHDiju3mUv7Jf2oVyW2ADW
** SIG ** oUa9WfOXpQlLSBCZgB/QACnFsZulP0V3HjXG0qKin3p6
** SIG ** IvpIlR+r+0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9az
** SIG ** I2h15q/6/IvrC4DqaTuv/DDtBEyO3991bWORPdGdVk5P
** SIG ** v4BXIqF4ETIheu9BCrE/+6jMpF3BoYibV3FWTkhFwELJ
** SIG ** m3ZbCoBIa/15n8G9bW1qyVJzEw16UM0xggSmMIIEogIB
** SIG ** ATCBlTB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
** SIG ** aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
** SIG ** ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQD
** SIG ** Ex9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDEx
** SIG ** AhMzAAAAZEeElIbbQRk4AAAAAABkMAkGBSsOAwIaBQCg
** SIG ** gbowGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYK
** SIG ** KwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARUwIwYJKoZI
** SIG ** hvcNAQkEMRYEFCRHpn+FfYBS4Oa3ZbyOaNoEXuaYMFoG
** SIG ** CisGAQQBgjcCAQwxTDBKoCyAKgBNAGkAYwByAG8AcwBv
** SIG ** AGYAdAAgAEMAbwByAHAAbwByAGEAdABpAG8AbqEagBho
** SIG ** dHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcN
** SIG ** AQEBBQAEggEAI20DoM6tZucgs0C3//gli7WjpkgKqNlq
** SIG ** TbWvxhbAfHbRv/XTr32S7dciRL8LqNXzd59dhyp65S1l
** SIG ** xzPXfo+J5l6TFJYN6qLpzPHazXRrznCJNYjHfgkF0d91
** SIG ** XpdD6bKBmpTrCe9Kl12ymRY+dldfi+A9NESVWvtbr0ki
** SIG ** cCM8+5ef2qeUitbFGn0dz4+tnIaMPypED7CAX1pphXUt
** SIG ** aqd0m+urvVs9anhNtMcX3IBaGutlVMs9QU8L0KNFfnk7
** SIG ** JaD/+tz7E2kzgPZ/KTRdbnfR5UTI6Hnb67HSNCnBJYCC
** SIG ** lKi4aHhTAW3MzSr1b2HvaBYsQNUSZydt8yEhCTIpmpJN
** SIG ** tKGCAigwggIkBgkqhkiG9w0BCQYxggIVMIICEQIBATCB
** SIG ** jjB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
** SIG ** Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
** SIG ** TWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhN
** SIG ** aWNyb3NvZnQgVGltZS1TdGFtcCBQQ0ECEzMAAADGeIA2
** SIG ** AXUaaXIAAAAAAMYwCQYFKw4DAhoFAKBdMBgGCSqGSIb3
** SIG ** DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8X
** SIG ** DTE2MTIwNTIwNTgyOFowIwYJKoZIhvcNAQkEMRYEFBDM
** SIG ** AitIrGBF1H9FX5AfyWUxi+ECMA0GCSqGSIb3DQEBBQUA
** SIG ** BIIBAKhz3Kkz1vDHHkt7p4NbpMYFWCIBBUKfcyWgcYEo
** SIG ** 5NQHQSH4KXUAM8ZlL6UzQIREns1ayupY27dFZC9gJowe
** SIG ** uPfofnKZiL7LtnWj4HE5WJtsqcrZ7vbh1nzCO+taXlfo
** SIG ** V5tuJeALZ9a7IhxsaMqivom50Lfwd9VYuSxJ1tc1froJ
** SIG ** wF9ME8LWeD9RXDaqugSExiEGxd33qUnZhQIAc8pcHSZx
** SIG ** dMFk3S+hRv7FXTIFbRlm+c/QdFcaATuWZTxc8km2iIV8
** SIG ** 1yPUdhSdNHrJY3s0TWhNu9zxm4H8j6egcN6E5kXDAqsv
** SIG ** sgvTI3dbtlGIeamFC+VY15EMICvVNBWOofV/z2Q=
</signature>
</job>